/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    bool f(TreeNode* p,TreeNode* q){

        if(p==NULL && q==NULL){

            return true;
        }

        if(p==NULL && q!=NULL){

            return false;
        }

        if(p!=NULL && q==NULL){

            return false;
        }

        bool curr=p->val==q->val;

        bool check1=f(p->left,q->right);
        bool check2=f(p->right,q->left);


        if(curr && check1 && check2){

            return true;
        }
        return false;


    }
     

     //SAME QUESTION AS SAMETREE QUESTION IN SAME TREE WE WERE GIVENTWO TREE AND WE HSVE TO CHECK WHETHER THEY ARE SAME OR NOT BUT IN THIS QUESTION WE HAVE TO CHECK IN ONE TREE SO WE MOVE TO ITS LEFT AND RIGHT AND STORE ITS NODES WHICH BEHAVE AS TWO DIFFERENT TREE

    bool isSymmetric(TreeNode* root) {

     
        if(root==NULL){

            return true;
        }



        TreeNode* p=root->left;
        TreeNode* q=root->right;

        return f(p,q);


        
    }
};
